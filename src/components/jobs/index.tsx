import { useQuery } from "@tanstack/react-query";
import { useState } from "react";
import { generateJobDescription } from "@services/apiJob";
import { SubmitButton } from "@components/button/SubmitButton";
import { EditOutlined } from "@ant-design/icons";
import { useSelector } from "react-redux";
import { RootState } from "@redux/reducers";
import { LoadingLine } from "@components/loading/LoadingLine";
import { Input, Skeleton } from "antd";

export const JobDescription: React.FC<JSXComponent> = ({ onClick }) => {
  const state = useSelector((state: RootState) => state.jobs);
  const [salary, setSalary] = useState<string>("");
  const [level, setLevel] = useState<string>("");
  const [requirements, setReq] = useState<string>("");
  const [benefits, setBenefits] = useState<string>("");
  const [type, setType] = useState<string>("");
  const [location, setLocation] = useState<string>("");
  const [exp, setExp] = useState<string>("");
  const [editing, setEditing] = useState<boolean>(false);
  const [howTo, setHowTo] = useState<string>("");
  const [jd, setJd] = useState<string>(
    state.description ||
      `[HCM] C∆° h·ªôi tr·ªü th√†nh "teammate" v·ªõi Con C∆∞ng cho sinh vi√™n nƒÉm 3!!!
  Team HSE - Con C∆∞ng ƒëang r·∫•t mong ch·ªù ch√†o ƒë√≥n c√°c b·∫°n HSE Intern v·ªÅ chung m·ªôt nh√†! Apply ngay th√¥i !!!
  ---------------
  ü•≥ B·∫°n nh·∫≠n ƒë∆∞·ª£c g√¨ khi ·ªü v·ªã tr√≠ n√†y?
  Th·ªùi gian l√†m vi·ªác: Fulltime (Th·ª© 2 - Th·ª© 6) (h·ªó tr·ª£ ngh·ªâ Ph√©p 3 bu·ªïi/th√°ng)
  ƒê∆∞·ª£c ƒë√†o t·∫°o, tr·∫£i nghi·ªám v√† ph√°t tri·ªÉn c√°c nghi·ªáp v·ª• chuy√™n m√¥n trong lƒ©nh v·ª±c Nh√¢n s·ª±.
  H·ªó tr·ª£ trong qu√° tr√¨nh th·ª±c t·∫≠p: 3.000.000 - 5.000.000 ƒë/th√°ng.
  ƒê∆∞·ª£c tham gia h·∫ßu h·∫øt c√°c ho·∫°t ƒë·ªông c·ªßa c√¥ng ty.
  ü§î Ch·ªâ c·∫ßn b·∫°n:
  L√† sinh vi√™n nƒÉm 3, 4. C√≥ th·ªÉ th·ª±c t·∫≠p fulltime.
  ChƒÉm ch·ªâ, ch·ªãu kh√≥, c√≥ tinh th·∫ßn tr√°ch nhi·ªám v√† giao ti·∫øp t·ªët.
  Kh·∫£ nƒÉng s·ª≠ d·ª•ng c√°c c√¥ng c·ª• thi·∫øt k·∫ø l√† ƒëi·ªÉm c·ªông.
  ---------------
  Xem th√¥ng tin JD t·∫°i: https://tuyendung.concung.com/603-tuyen-dung-hse-intern
  üíÅ‚Äç‚ôÄÔ∏è B·∫°n s·∫Ω l√†m vi·ªác t·∫°i: T·∫ßng 14, T√≤a nh√† Ph√∫ M·ªπ H∆∞ng, P. T√¢n Ph√∫, Qu·∫≠n 7, TP HCM.
  üôÜ‚Äç‚ôÄÔ∏è Th·ªùi gian b·∫°n s·∫Ω l√†m vi·ªác: 8h30 - 17h30 (T2 - T6).
  Nhanh tay g·ª≠i CV v·ªÅ: careers@concung.com ho·∫∑c inbox m√¨nh ƒë·ªÉ trao ƒë·ªïi th√™m nh√©!!!`
  );

  const jobQuery = useQuery({
    queryKey: ["job-description"],
    queryFn: () => generateJobDescription(jd),
    onSuccess: async (job) => {
      const jobDesc = JSON.parse(job);
      setSalary(jobDesc.salary);
      setLevel(jobDesc.level);
      setReq(jobDesc.requirements);
      setBenefits(jobDesc.benefits);
      setType(jobDesc.type);
      setLocation(jobDesc.location);
      setExp(jobDesc.requiredExperience);
      setHowTo(jobDesc.howTo);
    },
    onError: () => {},
    reloadOnWindowFocus: false,
  });

  return (
    <div className="job-desc">
      <div className="job-desc-nav">
        <h1>Xem tr∆∞·ªõc</h1>
      </div>
      <div className="job-desc-content">
        <div className="job-desc-heading">
          <h2>
            {state.title || `Th·ª±c t·∫≠p sinh K·ªπ s∆∞ Ph·∫ßn M·ªÅm chi nh√°nh TP.HCM`}
          </h2>
          <p onClick={() => (editing ? setEditing(false) : setEditing(true))}>
            Ch·ªânh s·ª≠a <EditOutlined />
          </p>
        </div>
        <h4>ƒêƒÉng v√†o 2 ng√†y tr∆∞·ªõc</h4>
        <p>{state.company || `Samsung`}</p>
        <SubmitButton text={"N·ªôp ƒë∆°n"} />
        <div className="job-desc-pink">
          <div className="job-desc-grid">
            <div>
              <h3>Lu∆°ng</h3>
              {editing ? (
                <Input
                  required
                  value={salary}
                  className="form-job"
                  onChange={(event) => {
                    setSalary(event.target.value);
                  }}
                />
              ) : (
                <LoadingLine loading={jobQuery.isLoading}>
                  <p>{salary}</p>
                </LoadingLine>
              )}
            </div>
            <div>
              <h3>C·∫•p b·∫≠c</h3>
              {editing ? (
                <Input
                  required
                  value={level}
                  className="form-job"
                  onChange={(event) => {
                    setLevel(event.target.value);
                  }}
                />
              ) : (
                <LoadingLine loading={jobQuery.isLoading}>
                  <p>{level}</p>
                </LoadingLine>
              )}
            </div>
            <div>
              <h3>H√¨nh th·ª©c</h3>
              {editing ? (
                <Input
                  required
                  value={type}
                  className="form-job"
                  onChange={(event) => {
                    setType(event.target.value);
                  }}
                />
              ) : (
                <LoadingLine loading={jobQuery.isLoading}>
                  <p>{type}</p>
                </LoadingLine>
              )}
            </div>
            <div>
              <h3>Kinh nghi·ªám</h3>
              {editing ? (
                <Input
                  required
                  value={exp}
                  className="form-job"
                  onChange={(event) => {
                    setExp(event.target.value);
                  }}
                />
              ) : (
                <LoadingLine loading={jobQuery.isLoading}>
                  <p>{exp}</p>
                </LoadingLine>
              )}
            </div>
          </div>
          <div className="job-desc-single">
            <div>
              <h3>ƒê·ªãa ƒëi·ªÉm</h3>
              {editing ? (
                <Input
                  required
                  value={location}
                  className="form-job"
                  onChange={(event) => {
                    setLocation(event.target.value);
                  }}
                />
              ) : (
                <LoadingLine loading={jobQuery.isLoading}>
                  <p>{location}</p>
                </LoadingLine>
              )}
            </div>
          </div>
        </div>
        <div>
          <h2>Quy·ªÅn l·ª£i</h2>
          {editing ? (
            <Input.TextArea
              rows={6}
              required
              value={benefits}
              className="form-job-long"
              onChange={(event) => {
                setBenefits(event.target.value);
              }}
            />
          ) : (
            <LoadingLine loading={jobQuery.isLoading}>
              <p>{benefits}</p>
            </LoadingLine>
          )}
        </div>
        <div>
          <h2>Y√™u c·∫ßu</h2>
          {editing ? (
            <Input.TextArea
              rows={6}
              required
              value={requirements}
              className="form-job-long"
              onChange={(event) => {
                setReq(event.target.value);
              }}
            />
          ) : (
            <LoadingLine loading={jobQuery.isLoading}>
              <p>{requirements}</p>
            </LoadingLine>
          )}
        </div>
        <div>
          <h2>M√¥ t·∫£</h2>
          {editing ? (
            <Input.TextArea
              rows={6}
              required
              value={jd}
              className="form-job-long"
              onChange={(event) => {
                setJd(event.target.value);
              }}
            />
          ) : (
            <Skeleton loading={jobQuery.isLoading} active>
              <pre>{jd}</pre>
            </Skeleton>
          )}
        </div>
        <div>
          <h2>C√°ch ·ª©ng tuy·ªÉn</h2>
          {editing ? (
            <Input.TextArea
              rows={6}
              required
              value={howTo}
              className="form-job-long"
              onChange={(event) => {
                setHowTo(event.target.value);
              }}
            />
          ) : (
            <Skeleton loading={jobQuery.isLoading} active>
              <pre>{howTo}</pre>
            </Skeleton>
          )}
        </div>
      </div>
      <div className="job-desc-button">
        <SubmitButton
          onClick={() => {
            onClick();
          }}
          text={"Ti·∫øp t·ª•c"}
        />
      </div>
    </div>
  );
};
